const { chromium } = require('playwright');

async function testRealisticConversationWithFeedback() {
  console.log('üöÄ Testando conversa realista com feedback...');

  const browser = await chromium.launch({
    headless: false,
    slowMo: 1000
  });

  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    console.log('üì± Navegando para o chat...');
    await page.goto('http://localhost:8080/chat');
    await page.waitForTimeout(3000);

    console.log('‚ûï Iniciando nova conversa...');
    await page.click('button:has-text("+ Nova Conversa")');
    await page.waitForTimeout(5000);

    // Simular conversa realista
    const conversationSteps = [
      {
        message: "Ol√°! Tenho uma d√∫vida sobre contrato de trabalho.",
        description: "Sauda√ß√£o inicial e apresenta√ß√£o do problema"
      },
      {
        message: "Assinei um contrato de trabalho mas agora quero sair da empresa. Tenho que cumprir aviso pr√©vio?",
        description: "Explica√ß√£o detalhada do problema"
      },
      {
        message: "O contrato diz que o aviso pr√©vio √© de 30 dias. Mas estou gr√°vida e a empresa tem condi√ß√µes de trabalho ruins.",
        description: "Mais detalhes sobre a situa√ß√£o"
      },
      {
        message: "Entendi. Mas e se eu estiver gr√°vida? Existe alguma prote√ß√£o especial?",
        description: "Pergunta de acompanhamento"
      },
      {
        message: "Perfeito! Voc√™ esclareceu completamente minha d√∫vida sobre o aviso pr√©vio e as prote√ß√µes para gestantes. Muito obrigada!",
        description: "Express√£o de satisfa√ß√£o completa - deve disparar feedback",
        expectFeedback: true
      }
    ];

    for (let i = 0; i < conversationSteps.length; i++) {
      const step = conversationSteps[i];
      console.log(`\nüìù PASSO ${i + 1}: ${step.description}`);
      console.log(`üì® Enviando: "${step.message}"`);

      // Enviar mensagem
      const messageInput = await page.locator('input[placeholder*="mensagem"], textarea[placeholder*="mensagem"], input[type="text"]').first();
      await messageInput.fill(step.message);

      const sendButton = await page.locator('button:has-text("Enviar"), button[type="submit"]').first();
      await sendButton.click();

      console.log('‚è≥ Aguardando resposta da IA...');
      await page.waitForTimeout(10000); // Tempo maior para resposta da IA

      if (step.expectFeedback) {
        console.log('üéØ AGUARDANDO FEEDBACK - Esta mensagem deve disparar detect_conversation_completion...');

        // Aguardar um pouco mais para a function call ser processada
        await page.waitForTimeout(3000);

        // Verificar se modal de feedback apareceu
        const feedbackModal = await page.locator('[data-testid="feedback-modal"], .feedback-modal, div:has-text("avalia√ß√£o"), div:has-text("feedback")').first();

        if (await feedbackModal.isVisible({ timeout: 5000 })) {
          console.log('‚úÖ SUCESSO! Modal de feedback apareceu!');
          console.log('üéâ Sistema de feedback funcionando corretamente!');

          // Fazer screenshot do modal
          await page.screenshot({
            path: `/Users/jeanc/idea-app/feedback-success-${Date.now()}.png`,
            fullPage: true
          });
          console.log('üì∏ Screenshot salvo do modal de feedback');

          // Verificar conte√∫do do modal
          const modalText = await feedbackModal.textContent();
          console.log(`üìù Conte√∫do do modal: "${modalText?.substring(0, 200)}..."`);

          break; // Teste conclu√≠do com sucesso
        } else {
          console.log('‚ùå Modal de feedback N√ÉO apareceu');

          // Screenshot para debug
          await page.screenshot({
            path: `/Users/jeanc/idea-app/feedback-failed-${Date.now()}.png`,
            fullPage: true
          });
          console.log('üì∏ Screenshot salvo para an√°lise');
        }
      } else {
        console.log('‚úÖ Resposta da IA recebida, continuando conversa...');
      }
    }

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
    await page.screenshot({
      path: '/Users/jeanc/idea-app/error-screenshot.png',
      fullPage: true
    });
  }

  console.log('\n‚è≥ Aguardando 5 segundos antes de fechar...');
  await page.waitForTimeout(5000);

  await browser.close();
  console.log('üèÅ Teste de conversa realista conclu√≠do!');
}

// Executar teste
testRealisticConversationWithFeedback();