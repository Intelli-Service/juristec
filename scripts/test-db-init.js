// Script de inicializaÃ§Ã£o do banco de dados para testes E2E
// Este script roda automaticamente quando o container MongoDB inicia

// Conectar ao banco
const db = connect('mongodb://admin:password@localhost:27017/juristec_test?authSource=admin');

// Criar usuÃ¡rios de teste
const users = [
  {
    _id: ObjectId(),
    email: 'admin@demo.com',
    name: 'Administrador Demo',
    password: '$2b$10$hashedpassword', // senha: admin123
    role: 'super_admin',
    isActive: true,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: ObjectId(),
    email: 'lawyer@demo.com',
    name: 'Advogado Demo',
    password: '$2b$10$hashedpassword', // senha: lawyer123
    role: 'lawyer',
    isActive: true,
    specialties: ['Direito Civil', 'Direito Trabalhista'],
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: ObjectId(),
    email: 'client@demo.com',
    name: 'Cliente Demo',
    password: '$2b$10$hashedpassword', // senha: client123
    role: 'client',
    isActive: true,
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

// Inserir usuÃ¡rios
db.users.insertMany(users);

// Criar configuraÃ§Ãµes de IA para testes
const aiConfigs = [
  {
    _id: ObjectId(),
    name: 'Assistente JurÃ­dico PT-BR',
    prompt: 'VocÃª Ã© um assistente jurÃ­dico brasileiro especializado em direito civil e trabalhista. Colete dados do usuÃ¡rio naturalmente durante a conversa e identifique se o caso Ã© simples (pode ser resolvido com orientaÃ§Ãµes bÃ¡sicas) ou complexo (necessita de advogado). Sempre responda em portuguÃªs brasileiro.',
    model: 'gemini-pro',
    temperature: 0.7,
    maxTokens: 2000,
    isActive: true,
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

// Inserir configuraÃ§Ãµes de IA
db.aiconfigs.insertMany(aiConfigs);

// Criar conversas de teste
const conversations = [
  {
    _id: ObjectId(),
    userId: users[2]._id, // client@demo.com
    status: 'active',
    createdAt: new Date(),
    updatedAt: new Date(),
    messages: [
      {
        _id: ObjectId(),
        role: 'user',
        content: 'OlÃ¡, preciso de ajuda com um problema trabalhista.',
        timestamp: new Date(Date.now() - 300000) // 5 minutos atrÃ¡s
      },
      {
        _id: ObjectId(),
        role: 'assistant',
        content: 'OlÃ¡! Sou um assistente jurÃ­dico e posso ajudar com questÃµes trabalhistas. Pode me contar mais sobre a sua situaÃ§Ã£o? Por exemplo, qual Ã© o problema especÃ­fico que vocÃª estÃ¡ enfrentando?',
        timestamp: new Date(Date.now() - 240000) // 4 minutos atrÃ¡s
      }
    ]
  }
];

// Inserir conversas
db.conversations.insertMany(conversations);

// Criar Ã­ndices para performance
db.users.createIndex({ email: 1 }, { unique: true });
db.users.createIndex({ role: 1 });
db.conversations.createIndex({ userId: 1 });
db.conversations.createIndex({ status: 1 });
db.conversations.createIndex({ createdAt: -1 });
db.messages.createIndex({ conversationId: 1 });
db.messages.createIndex({ timestamp: -1 });

print('âœ… Banco de dados de teste inicializado com sucesso!');
print('ğŸ“Š UsuÃ¡rios criados:');
users.forEach(user => {
  print(`   - ${user.email} (${user.role})`);
});
print('ğŸ¤– ConfiguraÃ§Ãµes de IA criadas:', aiConfigs.length);
print('ğŸ’¬ Conversas de teste criadas:', conversations.length);