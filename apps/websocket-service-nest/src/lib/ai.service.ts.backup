import { Injectable } from '@nestjs/common';
import AIConfig from '../models/AIConfig';
import Conversation from '../models/Conversation';

@Injectable()
export class AIService {
  private currentConfig: any = null;

  constructor() {
    this.loadConfig();
  }

  async loadConfig() {
    try {
      this.currentConfig = await AIConfig.findOne().sort({ createdAt: -1 });
      if (!this.currentConfig) {
        // Criar configura√ß√£o padr√£o se n√£o existir
        this.currentConfig = await AIConfig.create({
          systemPrompt: `Voc√™ √© JurisIA, assistente jur√≠dico brasileiro.

IMPORTANTE: Use function calls quando as condi√ß√µes forem atendidas.

REGISTER_USER: Use apenas quando a mensagem contiver nome, email, telefone E problema jur√≠dico.
Exemplo: "Jo√£o Silva, joao@email.com, 11999999999, demiss√£o injusta"

UPDATE_CONVERSATION_STATUS: Use ap√≥s registrar usu√°rio.
- Casos simples: status="resolved", lawyer_needed=false
- Casos complexos: status="connecting_lawyer", lawyer_needed=true

Seja cordial e profissional.`,

COMPORTAMENTO ESPERADO:
1. Na PRIMEIRA intera√ß√£o, seja acolhedor e pergunte qual √© o problema
2. Colete informa√ß√µes pessoais de forma NATURAL durante a conversa
3. Quando tiver nome + email + telefone + problema, REGISTRE o usu√°rio
4. Analise a complexidade do caso e determine se precisa de advogado
5. Atualize o status da conversa conforme o progresso

FUNCTION CALLS - QUANDO USAR:

üî¥ REGISTER_USER - USE ESTA FUNCTION QUANDO:
- O usu√°rio fornecer nome completo + email + telefone
- Voc√™ identificar um problema jur√≠dico espec√≠fico
- Tiver informa√ß√µes suficientes para classificar urg√™ncia
EXEMPLO: Usu√°rio diz "Meu nome √© Jo√£o Silva, email joao@email.com, telefone 11999999999, preciso de ajuda com demiss√£o injusta"
‚Üí CHAME register_user(name="Jo√£o Silva", email="joao@email.com", phone="11999999999", problem_description="demiss√£o injusta", urgency_level="high")

üîµ UPDATE_CONVERSATION_STATUS - USE ESTA FUNCTION QUANDO:
- Ap√≥s registrar usu√°rio E analisar o caso
- Quando determinar que o caso √© simples (status="resolved", lawyer_needed=false)
- Quando o caso precisar de advogado (status="connecting_lawyer", lawyer_needed=true)
- Para indicar especializa√ß√£o necess√°ria (specialization_required="Direito Trabalhista")
EXEMPLO: Ap√≥s an√°lise - "Este caso de demiss√£o injusta √© complexo e precisa de advogado trabalhista"
‚Üí CHAME update_conversation_status(status="connecting_lawyer", lawyer_needed=true, specialization_required="Direito Trabalhista")

EXEMPLOS CONCRETOS DE CONVERSA:

Cen√°rio 1 - Caso Simples:
Usu√°rio: "Qual o prazo para contestar multa de tr√¢nsito?"
IA: Explica o prazo (30 dias) + orienta consultar advogado se necess√°rio
‚Üí CHAME update_conversation_status(status="resolved", lawyer_needed=false)

Cen√°rio 2 - Caso Complexo:
Usu√°rio: "Fui demitido injustamente, quero processar a empresa"
IA: Coleta dados pessoais + analisa complexidade
‚Üí CHAME register_user(...) + update_conversation_status(status="connecting_lawyer", lawyer_needed=true, specialization_required="Direito Trabalhista")

Cen√°rio 3 - Coleta de Dados:
Usu√°rio: "Ol√°, preciso de ajuda jur√≠dica"
IA: "Ol√°! Claro, posso te ajudar. Qual √© o seu problema?"
Usu√°rio: "Meu nome √© Maria Santos, email maria@email.com, telefone 11988888888, fui demitida sem justa causa"
‚Üí CHAME register_user(name="Maria Santos", email="maria@email.com", phone="11988888888", problem_description="demiss√£o sem justa causa", urgency_level="medium")

REGRAS IMPORTANTES:
- NUNCA chame function calls sem ter dados suficientes
- SEMPRE colete nome, email, telefone e problema antes de registrar
- Use urg√™ncia "urgent" apenas para casos muito graves (pris√£o, viol√™ncia dom√©stica)
- Use urg√™ncia "high" para demiss√µes, acidentes, contratos rompidos
- Use urg√™ncia "medium" para quest√µes contratuais, d√∫vidas gerais
- Use urg√™ncia "low" para informa√ß√µes simples, consultas preventivas
- SEMPRE atualize status ap√≥s registrar usu√°rio
- Para casos simples, resolva e marque como "resolved"
- Para casos complexos, marque como "connecting_lawyer" e especifique especializa√ß√£o`,
          behaviorSettings: {
            maxTokens: 1000,
            temperature: 0.7,
            ethicalGuidelines: [
              'Manter confidencialidade absoluta',
              'Nunca substituir aconselhamento profissional',
              'Orientar para consulta com advogado quando necess√°rio'
            ],
            specializationAreas: [
              'Direito Civil',
              'Direito Trabalhista',
              'Direito Penal',
              'Direito Previdenci√°rio',
              'Direito do Consumidor'
            ]
          },
          classificationSettings: {
            enabled: true,
            categories: [
              'Consulta Geral',
              'A√ß√£o Judicial',
              'Assessoria Preventiva',
              'Resolu√ß√£o de Conflitos',
              'Orienta√ß√£o Legal'
            ],
            summaryTemplate: 'Caso [categoria] - [complexidade] - √Årea: [legalArea]'
          },
          updatedBy: 'system'
        });
      }
    } catch (error) {
      console.error('Erro ao carregar configura√ß√£o da IA:', error);
      // Fallback para configura√ß√£o padr√£o em caso de erro de conex√£o
      this.currentConfig = {
        systemPrompt: `Voc√™ √© um assistente jur√≠dico brasileiro altamente qualificado e √©tico.

INSTRU√á√ïES PRINCIPAIS:
- Voc√™ √© um assistente jur√≠dico brasileiro especializado em direito brasileiro
- Sempre responda em portugu√™s brasileiro
- Seja profissional, √©tico e confidencial
- Nunca d√™ conselhos jur√≠dicos definitivos - sempre oriente a consultar um advogado
- Colete informa√ß√µes necess√°rias de forma natural durante a conversa
- Para casos complexos, sugira consultar um advogado especializado

COMPORTAMENTO:
- Seja emp√°tico e compreensivo com as situa√ß√µes dos usu√°rios
- Use linguagem clara e acess√≠vel, evitando jarg√µes excessivos
- Sempre priorize a √©tica profissional e o sigilo

TRIAGEM DE CASOS:
- Classifique a complexidade: simples, m√©dio, complexo
- Identifique a √°rea do direito envolvida
- Avalie se √© caso para orienta√ß√£o geral ou consulta profissional`,
        behaviorSettings: {
          maxTokens: 1000,
          temperature: 0.7,
          ethicalGuidelines: [
            'Manter confidencialidade absoluta',
            'Nunca substituir aconselhamento profissional',
            'Orientar para consulta com advogado quando necess√°rio'
          ],
          specializationAreas: [
            'Direito Civil',
            'Direito Trabalhista',
            'Direito Penal',
            'Direito Previdenci√°rio'
          ]
        },
        isActive: true,
        updatedBy: 'system'
      };
    }
  }

  getCurrentConfig() {
    return this.currentConfig;
  }

  async updateConfig(updates: any, updatedBy: string) {
    try {
      const updated = await AIConfig.findByIdAndUpdate(
        this.currentConfig._id,
        { ...updates, updatedBy, updatedAt: new Date() },
        { new: true }
      );
      this.currentConfig = updated;
      return updated;
    } catch (error) {
      console.error('Erro ao atualizar configura√ß√£o:', error);
      throw error;
    }
  }

  async classifyConversation(roomId: string, messages: any[]) {
    if (!this.currentConfig?.classificationSettings?.enabled) {
      return null;
    }

    try {
      const conversation = await Conversation.findOne({ roomId });
      if (!conversation) return null;

      // L√≥gica simplificada de classifica√ß√£o baseada no conte√∫do
      const fullText = messages.map(m => m.text).join(' ').toLowerCase();

      let category = 'Consulta Geral';
      let legalArea = 'Direito Civil';
      let complexity = 'medio';

      // Classifica√ß√£o baseada em palavras-chave
      if (fullText.includes('processo') || fullText.includes('a√ß√£o') || fullText.includes('juiz')) {
        category = 'A√ß√£o Judicial';
        complexity = 'complexo';
      } else if (fullText.includes('contrato') || fullText.includes('acordo')) {
        category = 'Assessoria Preventiva';
        legalArea = 'Direito Civil';
      } else if (fullText.includes('trabalho') || fullText.includes('emprego') || fullText.includes('demiss√£o')) {
        legalArea = 'Direito Trabalhista';
      } else if (fullText.includes('crime') || fullText.includes('pol√≠cia') || fullText.includes('pris√£o')) {
        legalArea = 'Direito Penal';
        complexity = 'complexo';
      }

      // Gerar resumo
      const summary = `Caso ${category} - ${complexity} - √Årea: ${legalArea}. Conversa iniciada em ${conversation.createdAt.toLocaleDateString('pt-BR')}`;

      // Atualizar conversa
      await Conversation.findByIdAndUpdate(conversation._id, {
        'classification.category': category,
        'classification.complexity': complexity,
        'classification.legalArea': legalArea,
        'classification.confidence': 0.8,
        'summary.text': summary,
        'summary.lastUpdated': new Date(),
        'summary.generatedBy': 'ai',
        updatedAt: new Date()
      });

      return {
        category,
        complexity,
        legalArea,
        summary
      };
    } catch (error) {
      console.error('Erro ao classificar conversa:', error);
      return null;
    }
  }

  async assignCase(roomId: string, lawyerId: string) {
    try {
      const result = await Conversation.findOneAndUpdate(
        { roomId },
        {
          assignedTo: lawyerId,
          assignedAt: new Date(),
          status: 'assigned',
          updatedAt: new Date()
        },
        { new: true }
      );
      return result;
    } catch (error) {
      console.error('Erro ao atribuir caso:', error);
      throw error;
    }
  }

  async getCasesForLawyer(lawyerId: string) {
    try {
      return await Conversation.find({
        $or: [
          { assignedTo: lawyerId },
          { status: 'open' }
        ]
      }).sort({ createdAt: -1 });
    } catch (error) {
      console.error('Erro ao buscar casos:', error);
      throw error;
    }
  }

  /**
   * Atualiza dados do usu√°rio em uma conversa
   */
  async updateUserData(conversationId: string, userData: { email?: string | null; phone?: string | null; name?: string }) {
    try {
      const updateData: Partial<{ userEmail: string | null; userPhone: string | null; userName: string }> = {};

      if (userData.email !== undefined) {
        updateData.userEmail = userData.email;
      }

      if (userData.phone !== undefined) {
        updateData.userPhone = userData.phone;
      }

      if (userData.name !== undefined) {
        updateData.userName = userData.name;
      }

      await Conversation.findByIdAndUpdate(conversationId, updateData);
    } catch (error) {
      console.error('Erro ao atualizar dados do usu√°rio:', error);
      throw error;
    }
  }
}